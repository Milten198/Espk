buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        mavenCentral()
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.21.7'
        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.5.6'
        classpath 'me.tatarka:gradle-retrolambda:3.2.5'
        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.7.2'
        classpath 'com.stanfy.spoon:spoon-gradle-plugin:1.2.2'
    }
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
}



apply plugin: 'com.android.application'
apply plugin: 'kotlin-android' //or apply plugin: 'java'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'spoon'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'

    defaultConfig {
        applicationId "com.pgssoft.testwarez"
        minSdkVersion 18
        targetSdkVersion 26
        versionCode 33
        versionName "3.0.0"
        multiDexEnabled true
//        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        testApplicationId "com.pgssoft.testwarez.test"
        testInstrumentationRunner = "com.pgssoft.testwarez.test.cucumber.runner.CucumberTestRunner"
        vectorDrawables.useSupportLibrary = true

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
    }

    signingConfigs {

        debug {
            final Properties signingProperties = getDebugProperties()
            storeFile file(signingProperties['keystore_dir'])
            storePassword signingProperties['keystore_password']
            keyPassword signingProperties['key_password']
            keyAlias signingProperties['alias']
        }

        signedRelease {
            final Properties signingProperties = getReleaseProperties()
            storeFile file(signingProperties['keystore_dir'])
            storePassword signingProperties['keystore_password']
            keyPassword signingProperties['key_password']
            keyAlias signingProperties['alias']
        }
    }

    buildTypes {

        unsignedDebugDev {
            ext.isDebug = true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig android.signingConfigs.debug
            debuggable true
            multiDexEnabled true
            resValue "string", "endpoint", "http://10.10.70.31/app_dev.php/"
            ext.betaDistributionEmailsFilePath = "fabricTestersList.txt"
            ext.betaDistributionReleaseNotesFilePath = "fabricMessage.txt"
            ext.betaDistributionNotifications = true
        }

        unsignedDebugProd {
            ext.isDebug = true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig android.signingConfigs.debug
            debuggable true
            resValue "string", "endpoint", "http://api.testwarez.pl/"
        }

        signedReleaseProd {
            ext.isDebug = false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig android.signingConfigs.debug
            debuggable false
            resValue "string", "endpoint", "http://api.testwarez.pl/"
        }

        applicationVariants.all { variant ->
            def applicationId = variant.applicationId
            def adb = android.getAdbExecutable() as String
            def variantName = variant.name.capitalize()

            def grantPermissionTask = tasks.create("grant${variantName}Permission") {
                doLast {
                    "${adb} devices".execute().text.eachLine {
                        if (it.endsWith("device")) {
                            def device = it.split()[0]
                            println "Granting permission on device ${device}"
                            "${adb} -s ${device} shell pm grant ${applicationId} android.permission.WRITE_EXTERNAL_STORAGE".execute()
                            "${adb} -s ${device} shell pm grant ${applicationId} android.permission.READ_EXTERNAL_STORAGE".execute()
                        }
                    }
                }
            }
            grantPermissionTask.description = "Grants permissions on M+"
            grantPermissionTask.group = "extras"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testBuildType "unsignedDebugDev"

    testOptions {
        unitTests.all {
            systemProperty 'robolectric.dependency.repo.url', 'https://local-mirror/repo'
            systemProperty 'robolectric.dependency.repo.id', 'local'
        }
    }

    dexOptions {
        javaMaxHeapSize "3g"
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'TypographyFractions', 'TypographyQuotes', ''

    }
    sourceSets {
        androidTest {
            assets {
                assets.srcDirs = ['src/androidTest/assets']
            }

            java {
                java.srcDirs = ['src/androidTest/java']
            }
        }
        main {
            java.srcDirs = ['src/main/java']
        }
    }
}

apply plugin: 'me.tatarka.retrolambda'

retrolambda {
    jdk System.getenv("JAVA_HOME")
    defaultMethods false
    incremental true
}

android.variantFilter { variant ->
    if (variant.buildType.name.equals('release') || variant.buildType.name.equals('debug')) {
        variant.setIgnore(true)
    }
}

dependencies {

    compile project(':areatouchdetector')

    compile 'com.android.support:support-annotations:22.2.0'
    compile 'net.opacapp:multiline-collapsingtoolbar:1.4.0'
    compile 'com.github.chrisbanes:PhotoView:1.2.6'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    compile 'com.android.support:multidex:1.0.2'

    compile 'com.android.support:appcompat-v7:26.1.0'
    compile 'com.android.support:design:26.1.0'
    compile 'com.android.support:recyclerview-v7:26.1.0'
    compile 'com.android.support:cardview-v7:26.1.0'
    compile 'com.google.android.gms:play-services-gcm:11.2.2'
    compile 'com.google.android.gms:play-services-maps:11.2.2'

    compile 'com.squareup:otto:1.3.8'
    compile 'com.squareup.okhttp3:okhttp:3.8.1'
    compile 'com.squareup.okhttp3:logging-interceptor:3.8.1'
    compile('com.squareup.retrofit2:retrofit:2.3.0') {
        transitive = true
    }
    compile group: 'com.squareup.okhttp3', name: 'logging-interceptor', version: '3.4.1'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.3.0'
    compile 'net.danlew:android.joda:2.9.4'
    compile 'com.j256.ormlite:ormlite-android:4.48'
    compile 'com.google.code.gson:gson:2.7'
    compile 'com.mobsandgeeks:adapter-kit:0.5.3'
    compile 'de.hdodenhof:circleimageview:1.3.0'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile('com.crashlytics.sdk.android:crashlytics:2.5.2@aar') {
        transitive = true
    }
    compile 'io.reactivex:rxandroid:1.1.0'
    compile 'io.reactivex:rxjava:1.3.0'
    compile 'com.jakewharton.timber:timber:4.5.1'
    compile 'com.jakewharton.rxbinding:rxbinding:0.4.0'
    compile 'com.jakewharton.rxbinding:rxbinding-appcompat-v7:0.4.0'
    compile 'com.trello:rxlifecycle:0.5.0'
    compile 'com.trello:rxlifecycle-components:0.5.0'
    compile 'com.github.pwittchen:reactivenetwork:0.2.0'
    compile 'com.facebook.stetho:stetho:1.4.1'
    compile 'com.facebook.stetho:stetho-okhttp3:1.4.1'

    compile 'com.google.android.exoplayer:exoplayer:r1.5.16'
    compile 'com.github.tommus:youtube-android-player-api:1.2.2'

    //UnitTests dependencies
    testCompile 'com.google.code.gson:gson:2.7'
    testCompile 'net.danlew:android.joda:2.9.4'
    testCompile(group: 'com.fatboyindustrial.gson-jodatime-serialisers', name: 'gson-jodatime-serialisers', version: '1.3.0', changing: true) {
        transitive = true
    }
    testCompile 'org.khronos:opengl-api:gl1.1-android-2.1_r1'

    testCompile 'org.robolectric:robolectric:3.1'
    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:1.10.19"
    compile 'com.f2prateek.robin:robin:1.0.0'
    testCompile 'com.squareup.okhttp3:mockwebserver:3.8.1'

    //Cucumber
    androidTestCompile('info.cukes:cucumber-junit:1.1.4') {
        exclude module: 'cucumber-jvm-deps'
        exclude module: 'cucumber-core'
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    androidTestCompile('info.cukes:cucumber-android:1.2.4@jar') {
        exclude module: 'cucumber-jvm-deps'
    }
    androidTestCompile('info.cukes:cucumber-picocontainer:1.2.4') {
        exclude module: 'cucumber-core'
        exclude module: 'cucumber-jvm-deps'
    }
    androidTestCompile('info.cukes:cucumber-jvm:1.2.4') {
    }
    androidTestCompile('info.cukes:cucumber-core:1.2.4') {
        exclude module: 'cucumber-jvm-deps'
    }
    androidTestCompile('info.cukes:cucumber-jvm-deps:1.0.3') {
    }

    androidTestCompile 'com.android.support:multidex-instrumentation:1.0.2'
    androidTestCompile('com.android.support.test:runner:1.0.1') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile('com.android.support.test.espresso:espresso-core:3.0.1') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }


    androidTestCompile ('com.android.support.test.espresso:espresso-intents:3.0.1') {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-annotations'
    }

    androidTestCompile ('com.android.support.test.espresso:espresso-contrib:2.2.1') {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-annotations'
    }

    androidTestCompile 'junit:junit:4.12'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
}

def getReleaseProperties() {
    Properties properties = new Properties()

    File releaseFile = file("../keystore.jks")
    File signingFile = file("../signing.properties")

    if (releaseFile.exists() && signingFile.exists()) {
        properties.load(new FileInputStream(signingFile))
        return properties
    } else {
        return getDebugProperties()
    }
}

def getDebugProperties() {
    Properties properties = new Properties()

    properties.put("keystore_dir", "../debug_keystore.jks")
    properties.put("keystore_password", "TestWarez!XyZ")
    properties.put("key_password", "TestWarez!XyZ")
    properties.put("alias", "testwarez")
    return properties
}


android.applicationVariants.all { variant ->
    if (variant.name.contains('myflavor')) {
        // Do stuff
    }
}

apply plugin: 'com.google.gms.google-services'

task('cucumberRaports') {
    def adb = android.getAdbExecutable() as String
    def copyReportsTask = tasks.create("copyReports") {
        doLast {

            def reportDir = new File(project.buildDir, "cucumber-reports")
            if (reportDir.exists()) {
                reportDir.deleteDir()
            }
            if (!reportDir.exists()) {
                reportDir.mkdirs()
            }
            "${adb} devices".execute().text.eachLine {
                if (it.endsWith("device")) {
                    def device = it.split()[0]
                    def deviceDir = reportDir.getAbsolutePath().toString() + "/" + device.toString()
                    println "Retrieving cucumber test report from device ${device} to ${deviceDir}"
                    "${adb} -s ${device} pull /mnt/sdcard/cucumber-reports/ ${deviceDir}".execute()
                }
            }
        }
    }
    copyReportsTask.description = "Get reports from device"
    copyReportsTask.group = "extras"

    def deleteOldReportsTask = tasks.create("deleteReports") {
        doLast {
            "${adb} devices".execute().text.eachLine {
                if (it.endsWith("device")) {
                    def device = it.split()[0]
                    println "Delete cucumber test reports from device ${device}"
                    "${adb} -s ${device} shell rm -rf /mnt/sdcard/cucumber-reports/".execute()
                }
            }
        }
    }
    deleteOldReportsTask.description = "Delete old reports from device"
    deleteOldReportsTask.group = "extras"
}

